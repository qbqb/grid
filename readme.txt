Лэйауты и страницы:
    Поддерживаемые форматы: ".php" и ".html.twig", остальные файлы скопируются как есть!
    
    Макеты страниц лучше размещать в папке ./develop/pages/layouts/, а сами страницы в папке ./develop/pages/ и лучше без дополнительных вложенных папок!
    Из браузера все страницы доступны по имени файла без ".html.twig" или ".php".
    Пути относительно папки хранения. 
    Слеши в путях к вьюхам заменяются на "_", например "/news/add" покажет вьюху "/news_add". 
    Последний слеш игнорируется!
    Примеры:
        1. /            ~>      /develop/pages/index.(html.twig|php)
        3. /index       ~>      /develop/pages/index.(html.twig|php)
        4. /news        ~>      /develop/pages/news.(html.twig|php)
        4. /news/       ~>      /develop/pages/news.(html.twig|php)

        5. /news/add    ~>      /develop/pages/news_add.(html.twig|php)        
        6. /news/add/   ~>      /develop/pages/news_add.(html.twig|php)

        Можно раскладывать в подпапки, но лучше так не делать!
        7. /news/add    ~>      /develop/pages/news/add.(html.twig|php)
        8. /news/add/   ~>      /develop/pages/news/add.(html.twig|php)
        
        Для удобства просмотра вьюх:
        8. /layouts/layout ~> /develop/pages/layouts/layout.(html.twig|php)

Стили:
    При запрашивании в браузере файла "file.css" по адресу /assets/css/ проверяется наличие файла "file.css.less" и при его наличии отдается CSS пропущенный через lessphp.

Компиляция:
    Когда надо собрать макет вёрстки необходимо находясь в папке проекта выполнить php файл "compile.php".
    Проект вёрстки собирается в папку "./release/" из папки "./develop/".
        * Некоторые настройки компиляции можно поменять в файле "./develop/compile_config.php".
    При компиляции все файлы копируются как есть, кроме:
    1.  Игнорируются все файлы и папки, начинающиеся с "." или "_".
    2.  Все файлы ".html.twig" в папке ./develop/pages/ ~> ".html" - прогоняются через twig.
    3.  Все файлы ".css.less" ~> ".css" - прогоняются через lessphp. Без компрессии CSS!
    4.  Все файлы ".less" - Не копируется.
    5.  Если есть "магический файл" all.css.less с содержимым вида:
            @import "style1.css.less";
            @import "style2.css.less";
            @import "style3.css.less";
        При компиляции так же прогоняется через lessphp, но для него дополнительно применяются правила удаления пробелов с комментариями и сжатия структуры. 

Репозиторий:
    Допустим, что мы сейчас находимся в папке work и хотим создать новый проект верстки под названием "verstka" и расположить его в соответствующей папке.
       У нас есть адрес хранилища, где лежит "проект заготовки для верстки": ssh://git@dev.legion.info/verstka_maket.git
       (Не обязательно) Свою работу хранить в "рабочем хранилище": ssh://git@dev.legion.info/verstka_work.git
       При этом мы хотим "компилировать верстку" и выгружать её в хранилище: ssh://git@dev.legion.info/verstka.git       

    0. Создаем папку "verstka"

    1. НЕ ПЕРЕХОДЯ в папку "verstka" инициализируем в ней пустое Git хранилище:
       > git init verstka

    2. Два варианта работы с макетом верстки:
        2.1. Выкачать к себе, но не подключать хранилище.
            Последующее обновление макета из хранилища будет чуть сложнее, если оно вдруг понадобится.
            2.1.1. Скачиваем к себе выполнив:
                    > git pull ssh://git@dev.legion.info/verstka_maket.git

        2.2. Подключить удаленное хранилище.
            2.2.1. Переходим в папку "verstka" и добавляем источник "проекта заготовки для верстки" как удаленное хранилище.
                    Название этого хранилища будет "verstka_maket".
                    > git remote add verstka_maket ssh://git@dev.legion.info/verstka_maket.git
            2.2.2. Сливаем к себе "проект заготовки для верстки" из хранилища с названием "verstka_maket", из ветки master:
                    > git pull verstka_maket master

    3. Подключаем удаленное хранилище для "компилированной верстки":
        1. Инициируем субмодули Git:
            > git submodule init

        2. Добавляем удаленное хранилище "компилированной верстки" (папка release) в субмодуль:
            > git submodule add -f ssh://git@dev.legion.info/maket.git ./release

        3. Если надо! Добавляем удаленное хранилище для сохранения своей работы в папке develop в субмодуль:
            > git submodule add -f ssh://git@dev.legion.info/verstka_work.git ./develop
           Можно не делать, если удаленное хранилище в этом месте не нужно!

    4. Структура папок в папке develop.
        Два варианта: 
        * Можно создать пустую структуру папок выполнив ПХП файл ./vendor/develop_init.php для создания пустой структуры папок.
        * Или выкачать репозиторий макета из доступных:
            1.  ssh://git@dev.legion.info/verstka_maket/sample.git
            2.  ssh://git@dev.legion.info/verstka_maket/maxim.git

    5. Необходимо закоммитить изменения основной папки (verstka).
    
Далее в основном проекте работаем так:
    * когда надо "компилировать верстку" и выгрузить её в хранилище:
        - если необходимо, то делаем revert папки ./release до состояния последнего её pull'а
        - делаем pull, на случай внесенных в неё изменений другими людьми
        - запускаем "компиляцию"
        - смотрим различия, если надо фиксим свои макеты согласно изменениям других людей, запускаем компиляцию, перепроверяем.. и так пока не будет всё ОК
        - коммитим и push'им скомпилированный макет в хранилище
    * Папка develop - коммитим, пушим и пулим почти так же...
    
Ошибки:
    Если lessphp не может скомпилировать ресурсы в файл, то стоит проверить права доступа на запись в папку /develop/assets/css/.